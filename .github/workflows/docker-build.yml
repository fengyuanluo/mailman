name: Build and Push Docker Images

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      backend-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      frontend-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.nginx
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-all-in-one:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-all
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create all-in-one Dockerfile
        run: |
          cat > Dockerfile.all << 'EOF'
          # Multi-stage build for all-in-one image
          
          # Build backend
          FROM golang:1.23-alpine AS backend-builder
          WORKDIR /app
          COPY backend/go.mod backend/go.sum ./
          RUN go mod download
          COPY backend/ .
          RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o mailman ./cmd/mailman
          
          # Build frontend
          FROM node:18-alpine AS frontend-builder
          WORKDIR /app
          COPY frontend/package*.json ./
          RUN npm ci --only=production
          COPY frontend/ .
          RUN npm run build
          
          # Final all-in-one image
          FROM nginx:alpine
          
          # Install supervisor and other dependencies
          RUN apk add --no-cache supervisor
          
          # Copy backend binary
          COPY --from=backend-builder /app/mailman /usr/local/bin/mailman
          
          # Copy frontend build
          COPY --from=frontend-builder /app/out /usr/share/nginx/html
          
          # Copy nginx configuration
          COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf
          
          # Copy backend email.txt if exists
          COPY backend/email.txt /app/email.txt 2>/dev/null || echo "email.txt not found"
          
          # Create supervisor configuration
          RUN mkdir -p /etc/supervisor/conf.d
          COPY <<'SUPERVISOR_CONF' /etc/supervisor/conf.d/supervisord.conf
          [supervisord]
          nodaemon=true
          user=root
          
          [program:nginx]
          command=nginx -g "daemon off;"
          stdout_logfile=/var/log/nginx/access.log
          stderr_logfile=/var/log/nginx/error.log
          autorestart=true
          
          [program:mailman]
          command=/usr/local/bin/mailman
          directory=/app
          stdout_logfile=/var/log/mailman.log
          stderr_logfile=/var/log/mailman.log
          autorestart=true
          environment=SERVER_HOST="0.0.0.0",SERVER_PORT="8080"
          SUPERVISOR_CONF
          
          # Create log directories
          RUN mkdir -p /var/log/nginx /app
          
          # Expose ports
          EXPOSE 80 8080
          
          # Start supervisor
          CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
          EOF

      - name: Build and push all-in-one image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.all
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-all-in-one]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Docker Images

            ### Backend
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}
            ```

            ### Frontend  
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}
            ```

            ### All-in-One
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-all:${{ github.ref_name }}
            ```

            ## Quick Start with All-in-One Image
            ```bash
            docker run -d \
              --name mailman \
              -p 80:80 \
              -p 8080:8080 \
              -e MYSQL_ROOT_PASSWORD=your_password \
              -e MYSQL_DATABASE=mailman \
              -e MYSQL_USER=mailman \
              -e MYSQL_PASSWORD=your_password \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-all:${{ github.ref_name }}
            ```
          draft: false
          prerelease: false