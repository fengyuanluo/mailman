version: "3.8"

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mailman-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    # ports:
    #   - "3306:3306"  # 移除端口映射以避免冲突，MySQL 只在容器网络内部可访问
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - mailman-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mailman-backend
    restart: unless-stopped
    environment:
      # Server Configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080

      # Database Configuration
      DB_DRIVER: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}

      # OpenAI Configuration (deprecated - now managed via web interface)
      # OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      # OPENAI_BASE_URL: ${OPENAI_BASE_URL:-https://api.openai.com/v1}
      # OPENAI_MODEL: ${OPENAI_MODEL:-gpt-3.5-turbo}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - mailman-network
    volumes:
      - ./backend/email.txt:/app/email.txt:ro

  # Frontend with Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.nginx
    container_name: mailman-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - mailman-network
    environment:
      - NODE_ENV=production

networks:
  mailman-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
